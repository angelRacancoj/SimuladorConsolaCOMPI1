package simuladorconsola; 

import java_cup.runtime.*;

parser code {:
		consola myConsola;
	// Connect this parser to a scanner
	public parser(AnalizadorLexico lex) {
		super(lex);
		myConsola = new consola();
	}

	public void syntax_error(Symbol cur_token){
		System.out.printf("Error en linea %d, columna %d, token %s\n",
		cur_token.left, cur_token.right, symbol_name_from_id(cur_token.sym));
	}

	public String symbol_name_from_id(int sym){
	return String.valueOf(sym);
	}
:}

/* Terminals */
terminal		CONCAT, DIRECTION, RENAMEF, COPY, LIST, LISTDET, LISTHIDE, DELETE, DELETEDIR, MANPERMISO, MOVEPATH, CREATEFE, RECURSIVE, SPACE, BACKDIR, MAS, MENOS, NEWDIR, PDIRECTORY, PFILE, NFILE, READ, WRITE, EXECUTE, READ_WRITE, WRITE_EXECUTE, READ_EXECUTE, READ_WRITE_EXECUTE;

/* Non-terminals */
non terminal			s0, l0, l1, t, n0, c, f0, f1, o0, o1, d, r0, r1, w, h0, h1, h2, h3, pf, pd, nf, p_wrx, x;

precedence left LIST, LISTHIDE, LISTDET;

/* The grammar */
start with x;

/*s0-> the begging of sintactic analizer*/

s0 ::= l0 | c | o0 | r0 | t | n0 | f0 | d | w | h0;

/* ls-> para mostrar los archivos d la carpeta */

l0 ::= LIST SPACE l1
 		| LIST {: System.out.println("Ls"); :};

l1 ::= LISTDET {: System.out.println("Ls -l"); :}
		| LISTHIDE {: System.out.println("Ls -a"); :}
		| LISTDET SPACE LISTHIDE {: System.out.println("Ls -l -a"); :}
		| LISTHIDE SPACE LISTDET {: System.out.println("Ls -a -l"); :};

/*Concatenacion de comandos*/

x ::= x SPACE CONCAT SPACE s0 {: System.out.printf(" && "); :}
	| s0;

/* pwd-> para indicar nuestra ubicacion dentro d las carpetas */

w ::= DIRECTION {: System.out.println("pwd"); myConsola.getNowPath();:};

/* touch-> create a file empty */

t ::= CREATEFE SPACE pf:e {: System.out.println("touch "+ e); myConsola.addFile(e.toString());:};

/* cd-> navegate into folders */

n0 ::= MOVEPATH SPACE pd:e {: System.out.println("cd "+ e); :}
		| MOVEPATH SPACE BACKDIR {: System.out.println("cd .."); :};

/*mv-> change name a file*/

r0 ::= RENAMEF SPACE r1:e1 SPACE r1:e2 {: System.out.println("mv "+ e1 +" "+ e2); :};

r1 ::= pf:e {: RESULT = e; :} | nf:e {: RESULT = e; :};

/* rm-> remove a file */

f0 ::= DELETE  SPACE f1:e {: System.out.println("rm "+ e); myConsola.deleteFile(e.toString());:};

f1 ::= pf:e {: RESULT = e; :} | nf:e {: RESULT = e; :};

/* rmdir-> remove a directory */

d ::= DELETEDIR SPACE pd:e  {: System.out.println("rmdir "+ e); myConsola.deleteFile(e.toString());:}
	| DELETEDIR SPACE RECURSIVE SPACE pd:e {: System.out.println("rmdir -r "+ e); myConsola.deleteFile(e.toString());:};

/* mkdir-> create a new directory*/

c ::= NEWDIR SPACE pd:e {: System.out.println("mkdir "+ e); myConsola.addFile(e.toString());:};

/* cp-> copy*/

o0 ::= COPY SPACE o1:e1 SPACE pd:e2 {: System.out.println("cp "+ e1 +" "+ e2); :}
		| COPY SPACE RECURSIVE SPACE pd:e1 SPACE pd:e2 {: System.out.println("cp -r "+ e1 +" "+ e2); :};

o1 ::= pf:e {: RESULT = e; :} | pd:e {: RESULT = e; :} | nf:e {: RESULT = e; :};

/* chmod-> set xrw */

h0 ::= MANPERMISO SPACE h1;

h1 ::= RECURSIVE SPACE h2
		| MAS p_wrx:e1 SPACE h3:e2 {: System.out.println("chmod +" + e1 +" "+e2); :}
		| MENOS p_wrx:e1 SPACE h3:e2 {: System.out.println("chmod -" + e1 +" "+e2); :};

h2 ::= MAS p_wrx:e1 SPACE pd:e2 {: System.out.println("chmod -r +" + e1 +" "+e2); :}
		| MENOS p_wrx:e1 SPACE pd:e2 {: System.out.println("chmod -r +" + e1 +" "+e2); :};

h3 ::= pf:e {: RESULT = e; :} | nf:e {: RESULT = e; :};

/* declaracion de los paths y del nombre de archivo*/

pd ::= PDIRECTORY:e {: RESULT = e; :};

pf ::= PFILE:e {: RESULT = e; :};

nf ::= NFILE:e {: RESULT = e; :};

p_wrx ::= READ:e {: RESULT = e; :} 
		| WRITE:e {: RESULT = e; :} 
		| EXECUTE:e {: RESULT = e; :}
		| READ_WRITE:e {: RESULT = e; :}
		| READ_EXECUTE:e {: RESULT = e; :}
		| WRITE_EXECUTE:e {: RESULT = e; :}
		| READ_WRITE_EXECUTE:e {: RESULT = e; :};
